/**
 * generated by Xtext 2.36.0
 */
package fr.imt.bertin.dala.project.browser.util;

import fr.imt.bertin.dala.project.browser.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.imt.bertin.dala.project.browser.BrowserPackage
 * @generated
 */
public class BrowserAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BrowserPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BrowserPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BrowserSwitch<Adapter> modelSwitch =
    new BrowserSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseOpenUrl(OpenUrl object)
      {
        return createOpenUrlAdapter();
      }
      @Override
      public Adapter caseClickLink(ClickLink object)
      {
        return createClickLinkAdapter();
      }
      @Override
      public Adapter caseClickImage(ClickImage object)
      {
        return createClickImageAdapter();
      }
      @Override
      public Adapter caseVerifyLink(VerifyLink object)
      {
        return createVerifyLinkAdapter();
      }
      @Override
      public Adapter caseFillText(FillText object)
      {
        return createFillTextAdapter();
      }
      @Override
      public Adapter caseClickButton(ClickButton object)
      {
        return createClickButtonAdapter();
      }
      @Override
      public Adapter caseVerifyText(VerifyText object)
      {
        return createVerifyTextAdapter();
      }
      @Override
      public Adapter caseSelectOption(SelectOption object)
      {
        return createSelectOptionAdapter();
      }
      @Override
      public Adapter caseCheckCheckboxes(CheckCheckboxes object)
      {
        return createCheckCheckboxesAdapter();
      }
      @Override
      public Adapter caseSaveLink(SaveLink object)
      {
        return createSaveLinkAdapter();
      }
      @Override
      public Adapter caseTextPart(TextPart object)
      {
        return createTextPartAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseVariableReference(VariableReference object)
      {
        return createVariableReferenceAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.OpenUrl <em>Open Url</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.OpenUrl
   * @generated
   */
  public Adapter createOpenUrlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.ClickLink <em>Click Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.ClickLink
   * @generated
   */
  public Adapter createClickLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.ClickImage <em>Click Image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.ClickImage
   * @generated
   */
  public Adapter createClickImageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.VerifyLink <em>Verify Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.VerifyLink
   * @generated
   */
  public Adapter createVerifyLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.FillText <em>Fill Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.FillText
   * @generated
   */
  public Adapter createFillTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.ClickButton <em>Click Button</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.ClickButton
   * @generated
   */
  public Adapter createClickButtonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.VerifyText <em>Verify Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.VerifyText
   * @generated
   */
  public Adapter createVerifyTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.SelectOption <em>Select Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.SelectOption
   * @generated
   */
  public Adapter createSelectOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.CheckCheckboxes <em>Check Checkboxes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.CheckCheckboxes
   * @generated
   */
  public Adapter createCheckCheckboxesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.SaveLink <em>Save Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.SaveLink
   * @generated
   */
  public Adapter createSaveLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.TextPart <em>Text Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.TextPart
   * @generated
   */
  public Adapter createTextPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.imt.bertin.dala.project.browser.VariableReference <em>Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.imt.bertin.dala.project.browser.VariableReference
   * @generated
   */
  public Adapter createVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BrowserAdapterFactory
