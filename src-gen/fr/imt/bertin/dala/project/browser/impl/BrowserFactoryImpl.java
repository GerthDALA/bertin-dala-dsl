/**
 * generated by Xtext 2.36.0
 */
package fr.imt.bertin.dala.project.browser.impl;

import fr.imt.bertin.dala.project.browser.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BrowserFactoryImpl extends EFactoryImpl implements BrowserFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BrowserFactory init()
  {
    try
    {
      BrowserFactory theBrowserFactory = (BrowserFactory)EPackage.Registry.INSTANCE.getEFactory(BrowserPackage.eNS_URI);
      if (theBrowserFactory != null)
      {
        return theBrowserFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BrowserFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BrowserPackage.MODEL: return createModel();
      case BrowserPackage.STATEMENT: return createStatement();
      case BrowserPackage.OPEN_URL: return createOpenUrl();
      case BrowserPackage.CLICK_LINK: return createClickLink();
      case BrowserPackage.CLICK_IMAGE: return createClickImage();
      case BrowserPackage.VERIFY_LINK: return createVerifyLink();
      case BrowserPackage.FILL_TEXT: return createFillText();
      case BrowserPackage.CLICK_BUTTON: return createClickButton();
      case BrowserPackage.VERIFY_TEXT: return createVerifyText();
      case BrowserPackage.SELECT_OPTION: return createSelectOption();
      case BrowserPackage.CHECK_CHECKBOXES: return createCheckCheckboxes();
      case BrowserPackage.SAVE_LINK: return createSaveLink();
      case BrowserPackage.TEXT_PART: return createTextPart();
      case BrowserPackage.STRING_LITERAL: return createStringLiteral();
      case BrowserPackage.VARIABLE_REFERENCE: return createVariableReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenUrl createOpenUrl()
  {
    OpenUrlImpl openUrl = new OpenUrlImpl();
    return openUrl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClickLink createClickLink()
  {
    ClickLinkImpl clickLink = new ClickLinkImpl();
    return clickLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClickImage createClickImage()
  {
    ClickImageImpl clickImage = new ClickImageImpl();
    return clickImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VerifyLink createVerifyLink()
  {
    VerifyLinkImpl verifyLink = new VerifyLinkImpl();
    return verifyLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FillText createFillText()
  {
    FillTextImpl fillText = new FillTextImpl();
    return fillText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClickButton createClickButton()
  {
    ClickButtonImpl clickButton = new ClickButtonImpl();
    return clickButton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VerifyText createVerifyText()
  {
    VerifyTextImpl verifyText = new VerifyTextImpl();
    return verifyText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectOption createSelectOption()
  {
    SelectOptionImpl selectOption = new SelectOptionImpl();
    return selectOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckCheckboxes createCheckCheckboxes()
  {
    CheckCheckboxesImpl checkCheckboxes = new CheckCheckboxesImpl();
    return checkCheckboxes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SaveLink createSaveLink()
  {
    SaveLinkImpl saveLink = new SaveLinkImpl();
    return saveLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextPart createTextPart()
  {
    TextPartImpl textPart = new TextPartImpl();
    return textPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrowserPackage getBrowserPackage()
  {
    return (BrowserPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BrowserPackage getPackage()
  {
    return BrowserPackage.eINSTANCE;
  }

} //BrowserFactoryImpl
