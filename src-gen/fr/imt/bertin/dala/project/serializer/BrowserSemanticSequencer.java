/*
 * generated by Xtext 2.36.0
 */
package fr.imt.bertin.dala.project.serializer;

import com.google.inject.Inject;
import fr.imt.bertin.dala.project.browser.BrowserPackage;
import fr.imt.bertin.dala.project.browser.CheckCheckboxes;
import fr.imt.bertin.dala.project.browser.ClickButton;
import fr.imt.bertin.dala.project.browser.ClickImage;
import fr.imt.bertin.dala.project.browser.ClickLink;
import fr.imt.bertin.dala.project.browser.FillText;
import fr.imt.bertin.dala.project.browser.Model;
import fr.imt.bertin.dala.project.browser.OpenUrl;
import fr.imt.bertin.dala.project.browser.SaveLink;
import fr.imt.bertin.dala.project.browser.SelectOption;
import fr.imt.bertin.dala.project.browser.StringLiteral;
import fr.imt.bertin.dala.project.browser.VariableReference;
import fr.imt.bertin.dala.project.browser.VerifyLink;
import fr.imt.bertin.dala.project.browser.VerifyText;
import fr.imt.bertin.dala.project.services.BrowserGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BrowserSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BrowserGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BrowserPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BrowserPackage.CHECK_CHECKBOXES:
				sequence_CheckCheckboxes(context, (CheckCheckboxes) semanticObject); 
				return; 
			case BrowserPackage.CLICK_BUTTON:
				sequence_ClickButton(context, (ClickButton) semanticObject); 
				return; 
			case BrowserPackage.CLICK_IMAGE:
				sequence_ClickImage(context, (ClickImage) semanticObject); 
				return; 
			case BrowserPackage.CLICK_LINK:
				sequence_ClickLink(context, (ClickLink) semanticObject); 
				return; 
			case BrowserPackage.FILL_TEXT:
				sequence_FillText(context, (FillText) semanticObject); 
				return; 
			case BrowserPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BrowserPackage.OPEN_URL:
				sequence_OpenUrl(context, (OpenUrl) semanticObject); 
				return; 
			case BrowserPackage.SAVE_LINK:
				sequence_SaveLink(context, (SaveLink) semanticObject); 
				return; 
			case BrowserPackage.SELECT_OPTION:
				sequence_SelectOption(context, (SelectOption) semanticObject); 
				return; 
			case BrowserPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			case BrowserPackage.VARIABLE_REFERENCE:
				sequence_VariableReference(context, (VariableReference) semanticObject); 
				return; 
			case BrowserPackage.VERIFY_LINK:
				sequence_VerifyLink(context, (VerifyLink) semanticObject); 
				return; 
			case BrowserPackage.VERIFY_TEXT:
				sequence_VerifyText(context, (VerifyText) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns CheckCheckboxes
	 *     CheckCheckboxes returns CheckCheckboxes
	 *
	 * Constraint:
	 *     (items+=STRING items+=STRING*)
	 * </pre>
	 */
	protected void sequence_CheckCheckboxes(ISerializationContext context, CheckCheckboxes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ClickButton
	 *     ClickButton returns ClickButton
	 *
	 * Constraint:
	 *     buttonText=STRING
	 * </pre>
	 */
	protected void sequence_ClickButton(ISerializationContext context, ClickButton semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CLICK_BUTTON__BUTTON_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CLICK_BUTTON__BUTTON_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickButtonAccess().getButtonTextSTRINGTerminalRuleCall_1_0(), semanticObject.getButtonText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ClickImage
	 *     ClickImage returns ClickImage
	 *
	 * Constraint:
	 *     altText=STRING
	 * </pre>
	 */
	protected void sequence_ClickImage(ISerializationContext context, ClickImage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CLICK_IMAGE__ALT_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CLICK_IMAGE__ALT_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickImageAccess().getAltTextSTRINGTerminalRuleCall_1_0(), semanticObject.getAltText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ClickLink
	 *     ClickLink returns ClickLink
	 *
	 * Constraint:
	 *     linkText=STRING
	 * </pre>
	 */
	protected void sequence_ClickLink(ISerializationContext context, ClickLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.CLICK_LINK__LINK_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.CLICK_LINK__LINK_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickLinkAccess().getLinkTextSTRINGTerminalRuleCall_1_0(), semanticObject.getLinkText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns FillText
	 *     FillText returns FillText
	 *
	 * Constraint:
	 *     (text=TextPart field=STRING)
	 * </pre>
	 */
	protected void sequence_FillText(ISerializationContext context, FillText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.FILL_TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.FILL_TEXT__TEXT));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.FILL_TEXT__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.FILL_TEXT__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFillTextAccess().getTextTextPartParserRuleCall_1_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getFillTextAccess().getFieldSTRINGTerminalRuleCall_3_0(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns OpenUrl
	 *     OpenUrl returns OpenUrl
	 *
	 * Constraint:
	 *     url=STRING
	 * </pre>
	 */
	protected void sequence_OpenUrl(ISerializationContext context, OpenUrl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.OPEN_URL__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.OPEN_URL__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpenUrlAccess().getUrlSTRINGTerminalRuleCall_1_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns SaveLink
	 *     SaveLink returns SaveLink
	 *
	 * Constraint:
	 *     (index=INT container=STRING)
	 * </pre>
	 */
	protected void sequence_SaveLink(ISerializationContext context, SaveLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.SAVE_LINK__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.SAVE_LINK__INDEX));
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.SAVE_LINK__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.SAVE_LINK__CONTAINER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSaveLinkAccess().getIndexINTTerminalRuleCall_1_0(), semanticObject.getIndex());
		feeder.accept(grammarAccess.getSaveLinkAccess().getContainerSTRINGTerminalRuleCall_3_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns SelectOption
	 *     SelectOption returns SelectOption
	 *
	 * Constraint:
	 *     linkText=STRING
	 * </pre>
	 */
	protected void sequence_SelectOption(ISerializationContext context, SelectOption semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.SELECT_OPTION__LINK_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.SELECT_OPTION__LINK_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectOptionAccess().getLinkTextSTRINGTerminalRuleCall_1_0(), semanticObject.getLinkText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextPart returns StringLiteral
	 *     StringLiteral returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextPart returns VariableReference
	 *     VariableReference returns VariableReference
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_VariableReference(ISerializationContext context, VariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BrowserPackage.Literals.VARIABLE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BrowserPackage.Literals.VARIABLE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns VerifyLink
	 *     VerifyLink returns VerifyLink
	 *
	 * Constraint:
	 *     (texts+=TextPart texts+=TextPart*)
	 * </pre>
	 */
	protected void sequence_VerifyLink(ISerializationContext context, VerifyLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns VerifyText
	 *     VerifyText returns VerifyText
	 *
	 * Constraint:
	 *     (texts+=TextPart texts+=TextPart*)
	 * </pre>
	 */
	protected void sequence_VerifyText(ISerializationContext context, VerifyText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
